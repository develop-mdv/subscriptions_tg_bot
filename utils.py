import datetime
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from typing import List, Dict, Tuple
from config import SUBSCRIPTION_PERIODS, SUBSCRIPTION_STATUSES

def calculate_next_payment_date(start_date: str, period: str) -> datetime.date:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.
    """
    start = datetime.datetime.strptime(start_date, '%Y-%m-%d').date()
    today = datetime.date.today()
    
    if today < start:
        return start
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥ –ø–µ—Ä–∏–æ–¥–∞
    if period == 'daily':
        delta = datetime.timedelta(days=1)
        n = (today - start).days
        next_payment = start + delta * (n + 1)
        if next_payment <= today:
            next_payment += delta
        return next_payment
    elif period == 'weekly':
        delta = datetime.timedelta(weeks=1)
        n = (today - start).days // 7
        next_payment = start + delta * (n + 1)
        if next_payment <= today:
            next_payment += delta
        return next_payment
    elif period == 'monthly':
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –º–µ–∂–¥—É start –∏ today
        months = (today.year - start.year) * 12 + (today.month - start.month)
        next_month = start.month + months
        next_year = start.year + (next_month - 1) // 12
        next_month = ((next_month - 1) % 12) + 1
        try:
            next_payment = start.replace(year=next_year, month=next_month)
        except ValueError:
            # –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31 —Ñ–µ–≤—Ä–∞–ª—è), –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            import calendar
            last_day = calendar.monthrange(next_year, next_month)[1]
            next_payment = start.replace(year=next_year, month=next_month, day=last_day)
        if next_payment <= today:
            # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            next_month += 1
            if next_month > 12:
                next_month = 1
                next_year += 1
            try:
                next_payment = start.replace(year=next_year, month=next_month)
            except ValueError:
                import calendar
                last_day = calendar.monthrange(next_year, next_month)[1]
                next_payment = start.replace(year=next_year, month=next_month, day=last_day)
        return next_payment
    elif period == 'quarterly':
        # –ö–≤–∞—Ä—Ç–∞–ª = 3 –º–µ—Å—è—Ü–∞
        months = ((today.year - start.year) * 12 + (today.month - start.month)) // 3 * 3
        next_month = start.month + months
        next_year = start.year + (next_month - 1) // 12
        next_month = ((next_month - 1) % 12) + 1
        try:
            next_payment = start.replace(year=next_year, month=next_month)
        except ValueError:
            import calendar
            last_day = calendar.monthrange(next_year, next_month)[1]
            next_payment = start.replace(year=next_year, month=next_month, day=last_day)
        while next_payment <= today:
            # –°–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª
            next_month += 3
            if next_month > 12:
                next_month -= 12
                next_year += 1
            try:
                next_payment = start.replace(year=next_year, month=next_month)
            except ValueError:
                import calendar
                last_day = calendar.monthrange(next_year, next_month)[1]
                next_payment = start.replace(year=next_year, month=next_month, day=last_day)
        return next_payment
    elif period == 'yearly':
        years = today.year - start.year
        next_year = start.year + years
        try:
            next_payment = start.replace(year=next_year)
        except ValueError:
            # 29 —Ñ–µ–≤—Ä–∞–ª—è –∏ –Ω–µ–≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥
            next_payment = start.replace(year=next_year, day=28)
        if next_payment <= today:
            try:
                next_payment = start.replace(year=next_year + 1)
            except ValueError:
                next_payment = start.replace(year=next_year + 1, day=28)
        return next_payment
    
    return start

def days_until_payment(next_payment_date: datetime.date) -> int:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    today = datetime.date.today()
    delta = next_payment_date - today
    return delta.days

def format_subscription_info(subscription: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    next_payment = calculate_next_payment_date(subscription['start_date'], subscription['period'])
    days_left = days_until_payment(next_payment)
    
    status_text = SUBSCRIPTION_STATUSES.get(subscription['status'], subscription['status'])
    period_text = SUBSCRIPTION_PERIODS.get(subscription['period'], subscription['period'])
    
    info = f"üìã <b>{subscription['name']}</b>\n"
    info += f"üí∞ –¶–µ–Ω–∞: {subscription['price']} ‚ÇΩ\n"
    info += f"üìÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {period_text}\n"
    info += f"üìÜ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: {next_payment.strftime('%d.%m.%Y')}\n"
    info += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
    info += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
    
    if subscription['comment']:
        info += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {subscription['comment']}\n"
    
    return info

def create_subscriptions_dataframe(subscriptions: List[Dict]) -> pd.DataFrame:
    """–°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    data = []
    for sub in subscriptions:
        next_payment = calculate_next_payment_date(sub['start_date'], sub['period'])
        days_left = days_until_payment(next_payment)
        
        data.append({
            'ID': sub['id'],
            '–ù–∞–∑–≤–∞–Ω–∏–µ': sub['name'],
            '–¶–µ–Ω–∞ (‚ÇΩ)': sub['price'],
            '–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å': SUBSCRIPTION_PERIODS.get(sub['period'], sub['period']),
            '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞': sub['start_date'],
            '–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂': next_payment.strftime('%d.%m.%Y'),
            '–î–Ω–µ–π –¥–æ –ø–ª–∞—Ç–µ–∂–∞': days_left,
            '–°—Ç–∞—Ç—É—Å': SUBSCRIPTION_STATUSES.get(sub['status'], sub['status']),
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': sub['comment'] or '',
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è': '–í–∫–ª—é—á–µ–Ω—ã' if sub['notifications_enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω—ã'
        })
    
    return pd.DataFrame(data)

def create_expense_chart(subscriptions: List[Dict], user_id: int) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    if not subscriptions:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
    period_data = {}
    for sub in subscriptions:
        period = SUBSCRIPTION_PERIODS.get(sub['period'], sub['period'])
        if period not in period_data:
            period_data[period] = 0
        period_data[period] += sub['price']
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(10, 6))
    periods = list(period_data.keys())
    amounts = list(period_data.values())
    
    plt.bar(periods, amounts, color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7'])
    plt.title('–†–∞—Å—Ö–æ–¥—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –ø–æ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏', fontsize=14, fontweight='bold')
    plt.xlabel('–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å')
    plt.ylabel('–°—É–º–º–∞ (‚ÇΩ)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    chart_path = f'charts/expenses_chart_{user_id}.png'
    plt.savefig(chart_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    return chart_path

def export_to_excel(subscriptions: List[Dict], user_id: int, db) -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    if not subscriptions:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
    df = create_subscriptions_dataframe(subscriptions)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel
    filename = f'exports/subscriptions_{user_id}_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
    
    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        # –õ–∏—Å—Ç —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        df.to_excel(writer, sheet_name='–ü–æ–¥–ø–∏—Å–∫–∏', index=False)
        
        # –õ–∏—Å—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
        analytics_data = []
        
        # –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
        total_monthly = db.get_total_expenses(user_id, 'monthly')
        total_yearly = db.get_total_expenses(user_id, 'yearly')
        total_all = db.get_total_expenses(user_id, 'total')
        
        analytics_data.append(['–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü', f'{total_monthly:.2f} ‚ÇΩ'])
        analytics_data.append(['–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –≥–æ–¥', f'{total_yearly:.2f} ‚ÇΩ'])
        analytics_data.append(['–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤—Å–µ–≥–æ', f'{total_all:.2f} ‚ÇΩ'])
        analytics_data.append(['', ''])
        
        # –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        expenses_by_category = db.get_expenses_by_category(user_id)
        analytics_data.append(['–†–∞—Å—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏:', ''])
        for period, amount in expenses_by_category:
            period_name = SUBSCRIPTION_PERIODS.get(period, period)
            analytics_data.append([period_name, f'{amount:.2f} ‚ÇΩ'])
        
        analytics_df = pd.DataFrame(analytics_data, columns=['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
        analytics_df.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', index=False)
        
        # –õ–∏—Å—Ç —Å–æ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
        pivot_data = []
        for sub in subscriptions:
            next_payment = calculate_next_payment_date(sub['start_date'], sub['period'])
            pivot_data.append({
                '–ú–µ—Å—è—Ü': next_payment.strftime('%Y-%m'),
                '–ü–æ–¥–ø–∏—Å–∫–∞': sub['name'],
                '–°—É–º–º–∞': sub['price'],
                '–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å': SUBSCRIPTION_PERIODS.get(sub['period'], sub['period'])
            })
        
        pivot_df = pd.DataFrame(pivot_data)
        pivot_df.to_excel(writer, sheet_name='–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞', index=False)
    
    return filename

def parse_date_flexible(date_string: str) -> str | None:
    """
    –ì–∏–±–∫–∏–π –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–ì–ì–ì-–ú–ú-–î–î' –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: '–ì–ì–ì–ì-–ú–ú-–î–î', '–î–î.–ú–ú.–ì–ì–ì–ì', '–î.–ú.–ì–ì–ì–ì', '–î–î/–ú–ú/–ì–ì–ì–ì', '–î–î-–ú–ú-–ì–ì–ì–ì', '–î–î.–ú–ú.–ì–ì', '–î.–ú.–ì–ì'.
    """
    import re
    from datetime import datetime
    date_string = date_string.strip()
    formats = [
        '%Y-%m-%d',
        '%d.%m.%Y',
        '%d/%m/%Y',
        '%d-%m-%Y',
        '%d.%m.%y',
        '%d/%m/%y',
        '%d-%m-%y',
    ]
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    date_string = re.sub(r'\s+', '', date_string)
    for fmt in formats:
        try:
            dt = datetime.strptime(date_string, fmt)
            # –ï—Å–ª–∏ –≥–æ–¥ –¥–≤—É—Ö–∑–Ω–∞—á–Ω—ã–π, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
            if dt.year < 100:
                dt = dt.replace(year=dt.year + 2000)
            return dt.strftime('%Y-%m-%d')
        except ValueError:
            continue
    return None

def validate_date(date_string: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã (–≥–∏–±–∫–æ)"""
    return parse_date_flexible(date_string) is not None

def validate_price(price_string: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã"""
    try:
        price = float(price_string)
        return price >= 0
    except ValueError:
        return False 