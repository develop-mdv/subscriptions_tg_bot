import datetime
import asyncio
from typing import List, Dict
from telegram import Bot
from database import Database
from utils import calculate_next_payment_date, days_until_payment
from config import NOTIFICATION_DAYS_BEFORE
import sqlite3

class NotificationManager:
    def __init__(self, bot: Bot, db: Database):
        self.bot = bot
        self.db = db
    
    async def check_and_send_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        current_time = datetime.datetime.now()
        current_time_str = current_time.strftime('%H:%M')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        subscriptions = self.db.get_subscriptions_for_time_notification(current_time_str)
        
        for subscription in subscriptions:
            next_payment = calculate_next_payment_date(subscription['start_date'], subscription['period'])
            days_left = days_until_payment(next_payment)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è
            if days_left == NOTIFICATION_DAYS_BEFORE:
                await self.send_payment_reminder(subscription, days_left)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è
            elif days_left == 0:
                await self.send_payment_today_notification(subscription)
    
    async def send_payment_reminder(self, subscription: Dict, days_left: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ"""
        message = f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ</b>\n\n"
        message += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: <b>{subscription['name']}</b>\n"
        message += f"üí∞ –°—É–º–º–∞: {subscription['price']} ‚ÇΩ\n"
        message += f"üìÖ –î–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è: {datetime.date.today() + datetime.timedelta(days=days_left)}\n"
        message += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
        message += "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç! üí≥"
        
        try:
            await self.bot.send_message(
                chat_id=subscription['user_id'],
                text=message,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_payment_today_notification(self, subscription: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å–µ–≥–æ–¥–Ω—è"""
        message = f"üí≥ <b>–°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å–µ–≥–æ–¥–Ω—è!</b>\n\n"
        message += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: <b>{subscription['name']}</b>\n"
        message += f"üí∞ –°—É–º–º–∞: {subscription['price']} ‚ÇΩ\n"
        message += f"üìÖ –î–∞—Ç–∞: {datetime.date.today().strftime('%d.%m.%Y')}\n\n"
        message += "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Å—á–µ—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! ‚úÖ"
        
        try:
            await self.bot.send_message(
                chat_id=subscription['user_id'],
                text=message,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_daily_summary(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        subscriptions = self.db.get_user_subscriptions(user_id, 'active')
        
        if not subscriptions:
            return
        
        total_monthly = self.db.get_total_expenses(user_id, 'monthly')
        total_yearly = self.db.get_total_expenses(user_id, 'yearly')
        
        message = f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
        message += f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}\n"
        message += f"üí∞ –†–∞—Å—Ö–æ–¥—ã –≤ –º–µ—Å—è—Ü: {total_monthly:.2f} ‚ÇΩ\n"
        message += f"üí∞ –†–∞—Å—Ö–æ–¥—ã –≤ –≥–æ–¥: {total_yearly:.2f} ‚ÇΩ\n\n"
        
        # –ë–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        upcoming_payments = []
        for sub in subscriptions:
            next_payment = calculate_next_payment_date(sub['start_date'], sub['period'])
            days_left = days_until_payment(next_payment)
            if days_left <= 7:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
                upcoming_payments.append((sub, days_left))
        
        if upcoming_payments:
            message += "üîî <b>–ë–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
            for sub, days in sorted(upcoming_payments, key=lambda x: x[1]):
                message += f"‚Ä¢ {sub['name']} - —á–µ—Ä–µ–∑ {days} –¥–Ω. ({sub['price']} ‚ÇΩ)\n"
        
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")
    
    async def check_and_send_daily_summaries(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        current_time = datetime.datetime.now()
        current_time_str = current_time.strftime('%H:%M')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        with sqlite3.connect(self.db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT DISTINCT user_id FROM subscriptions 
                WHERE status = 'active' AND notifications_enabled = 1 
                AND notification_time = ?
            ''', (current_time_str,))
            user_ids = [row[0] for row in cursor.fetchall()]
        
        for user_id in user_ids:
            await self.send_daily_summary(user_id)
    
    async def run_notification_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while True:
            try:
                await self.check_and_send_notifications()
                await self.check_and_send_daily_summaries()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                await asyncio.sleep(60)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π 