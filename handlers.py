import datetime
import os
import logging
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters
from database import Database
from utils import (
    format_subscription_info, validate_date, validate_price, 
    create_expense_chart, export_to_excel, calculate_next_payment_date, parse_date_flexible
)
from config import SUBSCRIPTION_PERIODS, SUBSCRIPTION_STATUSES, NOTIFICATION_TIMES

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_NAME, WAITING_PRICE, WAITING_COMMENT, WAITING_DATE, WAITING_PERIOD = range(5)
WAITING_EDIT_FIELD, WAITING_EDIT_VALUE = range(5, 7)

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
EDIT_FIELD, EDIT_VALUE = range(7, 9)

class SubscriptionBot:
    def __init__(self, db: Database):
        self.db = db
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üìù –î–æ–±–∞–≤–ª—è—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã
‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
‚Ä¢ üìà –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_subscription")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="list_subscriptions")],
            [InlineKeyboardButton("üìÅ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="inactive_subscriptions")],
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export_excel")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/add - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/list - –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
/analytics - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
/export - –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:</b>
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞, –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª—é–±—ã—Ö –ø–æ–ª–µ–π
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ: –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –°—Ç–∞—Ç—É—Å—ã: –∞–∫—Ç–∏–≤–Ω–∞—è, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ—Ç–º–µ–Ω–µ–Ω–∞

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ó–∞ –¥–µ–Ω—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –í –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

<b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>
‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü/–≥–æ–¥
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
        """
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "add_subscription":
            # –ó–∞–ø—É—Å–∫–∞–µ–º ConversationHandler —á–µ—Ä–µ–∑ update.callback_query
            # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ start_add_subscription (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–æ–º–∞–Ω–¥–µ)
            return await self.start_add_subscription(update, context)
        elif query.data == "list_subscriptions":
            await self.show_subscriptions(query, context)
        elif query.data == "analytics":
            await self.show_analytics(query, context)
        elif query.data == "export_excel":
            await self.export_data(query, context)
        elif query.data == "settings":
            await self.show_settings(query, context)
        elif query.data == "settings_notifications":
            await self.show_notifications_settings(query, context)
        elif query.data == "settings_notification_time":
            await self.show_notification_time_settings(query, context)
        elif query.data.startswith("change_notification_time_"):
            await self.change_notification_time_menu(query, context)
        elif query.data.startswith("set_notification_time_"):
            await self.set_notification_time(query, context)
        elif query.data.startswith("edit_"):
            await self.edit_subscription_menu(query, context)
        elif query.data.startswith("delete_"):
            await self.delete_subscription(query, context)
        elif query.data.startswith("toggle_notifications_"):
            await self.toggle_notifications(query, context)
        elif query.data == "back_to_main":
            await self.show_main_menu(query, context)
        elif query.data == "inactive_subscriptions":
            await self.show_inactive_subscriptions(query, context)
        elif query.data.startswith("change_status_"):
            await self.change_subscription_status_menu(query, context)
        elif query.data.startswith("set_status_inactive_"):
            await self.set_status_inactive(query, context)
    
    async def start_add_subscription_simple(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É (–±–µ–∑ ConversationHandler)"""
        logger.info("=== –ü–†–û–°–¢–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ò –ß–ï–†–ï–ó –ö–ù–û–ü–ö–£ ===")
        user_id = query.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
        
        self.user_states[user_id] = {'action': 'add', 'data': {}}
        
        await query.edit_message_text(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:",
            parse_mode='HTML'
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['waiting_for'] = 'name'
        context.user_data['user_states'] = self.user_states
    
    async def handle_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        logger.info("=== –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ó–í–ê–ù–ò–Ø –ü–û–î–ü–ò–°–ö–ò ===")
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
        
        user_id = update.message.from_user.id
        name = update.message.text.strip()
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è '{name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"–¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {list(self.user_states.keys())}")
        
        if user_id not in self.user_states:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö!")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /add")
            return ConversationHandler.END
        
        if len(name) < 2:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return WAITING_NAME
        
        self.user_states[user_id]['data']['name'] = name
        logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.user_states[user_id]}")
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n"
            "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return WAITING_PRICE
    
    async def handle_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        user_id = update.message.from_user.id
        price_text = update.message.text.strip()
        
        if not validate_price(price_text):
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
            return WAITING_PRICE
        
        price = float(price_text)
        self.user_states[user_id]['data']['price'] = price
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"‚úÖ –¶–µ–Ω–∞: <b>{price} ‚ÇΩ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):\n"
            "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return WAITING_COMMENT
    
    async def handle_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        user_id = update.message.from_user.id
        comment = update.message.text.strip()
        
        if comment == '-':
            comment = ''
        
        self.user_states[user_id]['data']['comment'] = comment
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{comment or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:\n"
            "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return WAITING_DATE
    
    async def handle_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã"""
        user_id = update.message.from_user.id
        date_text = update.message.text.strip()
        normalized_date = parse_date_flexible(date_text)
        if not normalized_date:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä—ã: 2024-06-01, 01.06.2024, 1.6.24, 01/06/2024, 01-06-2024",
                parse_mode='HTML'
            )
            return WAITING_DATE
        self.user_states[user_id]['data']['start_date'] = normalized_date
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
        keyboard = []
        for period_key, period_name in SUBSCRIPTION_PERIODS.items():
            keyboard.append([InlineKeyboardButton(period_name, callback_data=f"period_{period_key}")])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{normalized_date}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return WAITING_PERIOD
    
    async def handle_period_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        period = query.data.replace("period_", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        data = self.user_states[user_id]['data']
        subscription_id = self.db.add_subscription(
            user_id=user_id,
            name=data['name'],
            price=data['price'],
            comment=data['comment'],
            start_date=data['start_date'],
            period=period
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del self.user_states[user_id]
        
        await query.edit_message_text(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
            f"üí∞ –¶–µ–Ω–∞: {data['price']} ‚ÇΩ\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {SUBSCRIPTION_PERIODS[period]}\n"
            f"üìÜ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {datetime.datetime.strptime(data['start_date'], '%Y-%m-%d').strftime('%d.%m.%Y')}\n\n"
            f"ID –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_id}",
            parse_mode='HTML'
        )
        # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.show_main_menu(query, context)
        return ConversationHandler.END
    
    async def show_subscriptions(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        user_id = query.from_user.id
        subscriptions = self.db.get_user_subscriptions(user_id, 'active')
        
        if not subscriptions:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return
        
        message = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        
        for i, sub in enumerate(subscriptions, 1):
            next_payment = calculate_next_payment_date(sub['start_date'], sub['period'])
            days_left = (next_payment - datetime.date.today()).days
            
            message += f"{i}. <b>{sub['name']}</b>\n"
            message += f"   üí∞ {sub['price']} ‚ÇΩ | üìÖ {SUBSCRIPTION_PERIODS[sub['period']]}\n"
            message += f"   ‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: {next_payment.strftime('%d.%m.%Y')} (—á–µ—Ä–µ–∑ {days_left} –¥–Ω.)\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = []
        for sub in subscriptions:
            keyboard.append([
                InlineKeyboardButton(f"‚úèÔ∏è {sub['name']}", callback_data=f"edit_{sub['id']}"),
                InlineKeyboardButton(f"üóëÔ∏è {sub['name']}", callback_data=f"delete_{sub['id']}")
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_analytics(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        user_id = query.from_user.id
        subscriptions = self.db.get_user_subscriptions(user_id, 'active')
        
        if not subscriptions:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìä <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_monthly = self.db.get_total_expenses(user_id, 'monthly')
        total_yearly = self.db.get_total_expenses(user_id, 'yearly')
        total_all = self.db.get_total_expenses(user_id, 'total')
        total_all_time = self.db.get_total_expenses_active_periods(user_id)
        
        message = "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n\n"
        message += f"üìã –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}\n"
        message += f"üí∞ –†–∞—Å—Ö–æ–¥—ã –≤ –º–µ—Å—è—Ü: {total_monthly:.2f} ‚ÇΩ\n"
        message += f"üí∞ –†–∞—Å—Ö–æ–¥—ã –≤ –≥–æ–¥: {total_yearly:.2f} ‚ÇΩ\n"
        message += f"üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_all:.2f} ‚ÇΩ\n"
        message += f"üßæ <b>–°—É–º–º–∞ –≤—Å–µ—Ö —Ç—Ä–∞—Ç –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b> {total_all_time:.2f} ‚ÇΩ\n\n"
        
        # –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        expenses_by_category = self.db.get_expenses_by_category(user_id)
        if expenses_by_category:
            message += "üìà <b>–†–∞—Å—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏:</b>\n"
            for period, amount in expenses_by_category:
                period_name = SUBSCRIPTION_PERIODS.get(period, period)
                message += f"‚Ä¢ {period_name}: {amount:.2f} ‚ÇΩ\n"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        try:
            chart_path = create_expense_chart(subscriptions, user_id)
            if os.path.exists(chart_path):
                with open(chart_path, 'rb') as chart:
                    await query.message.reply_photo(
                        photo=chart,
                        caption="üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º"
                    )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def export_data(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
        user_id = query.from_user.id
        subscriptions = self.db.get_user_subscriptions(user_id, 'active')
        
        if not subscriptions:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üì§ <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ!",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs('exports', exist_ok=True)
            
            filename = export_to_excel(subscriptions, user_id, self.db)
            
            with open(filename, 'rb') as file:
                await query.message.reply_document(
                    document=file,
                    filename=f"subscriptions_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    caption="üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:\n‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤\n‚Ä¢ –°–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É",
                    parse_mode='HTML'
                )
            
            await query.edit_message_text(
                "‚úÖ <b>–≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                "–§–∞–π–ª Excel –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.",
                parse_mode='HTML'
            )
            
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:</b>\n\n{str(e)}",
                parse_mode='HTML'
            )
    
    async def show_settings(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        message = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
        
        keyboard = [
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
            [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="settings_notification_time")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def toggle_notifications(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        subscription_id = int(query.data.replace("toggle_notifications_", ""))
        subscription = self.db.get_subscription(subscription_id)
        
        if not subscription:
            await query.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        new_status = not subscription['notifications_enabled']
        self.db.update_subscription(subscription_id, notifications_enabled=new_status)
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await query.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await self.show_notifications_settings(query, context)
    
    async def edit_subscription_menu(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        subscription_id = int(query.data.replace("edit_", ""))
        subscription = self.db.get_subscription(subscription_id)
        
        if not subscription:
            await query.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        message = format_subscription_info(subscription)
        message += "\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field_{subscription_id}_name")],
            [InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"edit_field_{subscription_id}_price")],
            [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"edit_field_{subscription_id}_comment")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", callback_data=f"edit_field_{subscription_id}_start_date")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", callback_data=f"edit_field_{subscription_id}_period")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data=f"edit_field_{subscription_id}_status")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_subscriptions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def delete_subscription(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        subscription_id = int(query.data.replace("delete_", ""))
        subscription = self.db.get_subscription(subscription_id)
        
        if not subscription:
            await query.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        self.db.delete_subscription(subscription_id)
        
        await query.answer(f"üóëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ '{subscription['name']}' —É–¥–∞–ª–µ–Ω–∞")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
        await self.show_subscriptions(query, context)
    
    async def show_main_menu(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        welcome_text = """
üéâ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_subscription")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="list_subscriptions")],
            [InlineKeyboardButton("üìÅ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="inactive_subscriptions")],
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export_excel")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            welcome_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    async def start_add_subscription_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add"""
        logger.info("=== –ù–ê–ß–ê–õ–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–û–î–ü–ò–°–ö–ò –ß–ï–†–ï–ó –ö–û–ú–ê–ù–î–£ ===")
        user_id = update.message.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏")
        
        self.user_states[user_id] = {'action': 'add', 'data': {}}
        
        await update.message.reply_text(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:",
            parse_mode='HTML'
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return WAITING_NAME
    
    async def start_add_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        logger.info("=== –ù–ê–ß–ê–õ–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–û–î–ü–ò–°–ö–ò –ß–ï–†–ï–ó –ö–ù–û–ü–ö–£ ===")
        # –ü–æ–ª—É—á–∞–µ–º CallbackQuery –∏–∑ Update
        query = update.callback_query
        user_id = query.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
        
        self.user_states[user_id] = {'action': 'add', 'data': {}}
        
        await query.edit_message_text(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:",
            parse_mode='HTML'
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return WAITING_NAME

    async def edit_field_entry(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        data = query.data  # edit_field_{id}_{field}
        parts = data.split('_')
        subscription_id = int(parts[2])
        field = '_'.join(parts[3:])
        context.user_data['edit_subscription_id'] = subscription_id
        context.user_data['edit_field'] = field
        field_names = {
            'name': '–Ω–∞–∑–≤–∞–Ω–∏–µ',
            'price': '—Ü–µ–Ω—É',
            'comment': '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            'start_date': '–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞',
            'period': '–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å',
            'status': '—Å—Ç–∞—Ç—É—Å',
        }
        prompt = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: <b>{field_names.get(field, field)}</b>"
        # –î–ª—è period –∏ status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if field == 'period':
            keyboard = [[InlineKeyboardButton(v, callback_data=f"set_period_{k}")] for k, v in SUBSCRIPTION_PERIODS.items()]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return EDIT_VALUE
        elif field == 'status':
            keyboard = [[InlineKeyboardButton(v, callback_data=f"set_status_{k}")] for k, v in SUBSCRIPTION_STATUSES.items()]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return EDIT_VALUE
        else:
            await query.edit_message_text(prompt, parse_mode='HTML')
            return EDIT_VALUE

    async def edit_field_value(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è"""
        subscription_id = context.user_data.get('edit_subscription_id')
        field = context.user_data.get('edit_field')
        value = update.message.text.strip() if update.message else None
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if field == 'price':
            if not validate_price(value):
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
                return EDIT_VALUE
            value = float(value)
        elif field == 'start_date':
            normalized = parse_date_flexible(value)
            if not normalized:
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä—ã: 2024-06-01, 01.06.2024, 1.6.24, 01/06/2024, 01-06-2024")
                return EDIT_VALUE
            value = normalized
        elif field == 'name':
            if len(value) < 2:
                await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return EDIT_VALUE
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.db.update_subscription(subscription_id, **{field: value})
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        subscription = self.db.get_subscription(subscription_id)
        message = format_subscription_info(subscription)
        message += "\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field_{subscription_id}_name")],
            [InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"edit_field_{subscription_id}_price")],
            [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"edit_field_{subscription_id}_comment")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", callback_data=f"edit_field_{subscription_id}_start_date")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", callback_data=f"edit_field_{subscription_id}_period")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data=f"edit_field_{subscription_id}_status")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_subscriptions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
        return ConversationHandler.END

    async def edit_field_set_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        subscription_id = context.user_data.get('edit_subscription_id')
        period = query.data.replace('set_period_', '')
        self.db.update_subscription(subscription_id, period=period)
        subscription = self.db.get_subscription(subscription_id)
        message = format_subscription_info(subscription)
        message += "\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field_{subscription_id}_name")],
            [InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"edit_field_{subscription_id}_price")],
            [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"edit_field_{subscription_id}_comment")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", callback_data=f"edit_field_{subscription_id}_start_date")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", callback_data=f"edit_field_{subscription_id}_period")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data=f"edit_field_{subscription_id}_status")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_subscriptions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
        return ConversationHandler.END

    async def edit_field_set_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        subscription_id = context.user_data.get('edit_subscription_id')
        status = query.data.replace('set_status_', '')
        self.db.update_subscription(subscription_id, status=status)
        subscription = self.db.get_subscription(subscription_id)
        message = format_subscription_info(subscription)
        message += "\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field_{subscription_id}_name")],
            [InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"edit_field_{subscription_id}_price")],
            [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"edit_field_{subscription_id}_comment")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", callback_data=f"edit_field_{subscription_id}_start_date")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", callback_data=f"edit_field_{subscription_id}_period")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data=f"edit_field_{subscription_id}_status")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_subscriptions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
        return ConversationHandler.END

    async def show_inactive_subscriptions(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö (–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö) –ø–æ–¥–ø–∏—Å–æ–∫"""
        user_id = query.from_user.id
        paused = self.db.get_user_subscriptions(user_id, 'paused')
        cancelled = self.db.get_user_subscriptions(user_id, 'cancelled')
        subscriptions = paused + cancelled
        if not subscriptions:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "üìã <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫</b>",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return
        message = "üìã <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        keyboard = []
        for i, sub in enumerate(subscriptions, 1):
            status = SUBSCRIPTION_STATUSES.get(sub['status'], sub['status'])
            start_date = datetime.datetime.strptime(sub['start_date'], '%Y-%m-%d').strftime('%d.%m.%Y')
            message += f"{i}. <b>{sub['name']}</b>\n"
            message += f"   üí∞ {sub['price']} ‚ÇΩ | üìÖ {SUBSCRIPTION_PERIODS.get(sub['period'], sub['period'])} | üìä {status}\n"
            message += f"   üìÜ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n"
            keyboard.append([InlineKeyboardButton(f"{i}. –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{sub['id']}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)

    async def change_subscription_status_menu(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        await query.answer()
        subscription_id = int(query.data.replace("change_status_", ""))
        context.user_data['change_status_subscription_id'] = subscription_id
        keyboard = [[InlineKeyboardButton(v, callback_data=f"set_status_inactive_{subscription_id}_{k}")] for k, v in SUBSCRIPTION_STATUSES.items()]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="inactive_subscriptions")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", parse_mode='HTML', reply_markup=reply_markup)

    async def set_status_inactive(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        await query.answer()
        data = query.data.replace("set_status_inactive_", "")
        parts = data.split("_")
        subscription_id = int(parts[0])
        new_status = '_'.join(parts[1:])
        self.db.update_subscription(subscription_id, status=new_status)
        await self.show_inactive_subscriptions(query, context)

    async def show_notifications_settings(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        user_id = query.from_user.id
        subscriptions = self.db.get_user_subscriptions(user_id, 'active')
        
        message = "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        message += "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º:\n\n"
        
        keyboard = []
        for sub in subscriptions:
            status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if sub['notifications_enabled'] else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
            message += f"‚Ä¢ {sub['name']}: {status}\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"{'üîï' if sub['notifications_enabled'] else 'üîî'} {sub['name']}", 
                    callback_data=f"toggle_notifications_{sub['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_notification_time_settings(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        user_id = query.from_user.id
        subscriptions = self.db.get_user_subscriptions(user_id, 'active')
        
        message = "‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
        
        keyboard = []
        for sub in subscriptions:
            current_time = sub.get('notification_time', '09:00')
            message += f"‚Ä¢ {sub['name']}: {current_time}\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"‚è∞ {sub['name']} ({current_time})", 
                    callback_data=f"change_notification_time_{sub['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def change_notification_time_menu(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        subscription_id = int(query.data.replace("change_notification_time_", ""))
        subscription = self.db.get_subscription(subscription_id)
        
        if not subscription:
            await query.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        context.user_data['change_time_subscription_id'] = subscription_id
        
        message = f"‚è∞ <b>–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        message += f"–ü–æ–¥–ø–∏—Å–∫–∞: <b>{subscription['name']}</b>\n"
        message += f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{subscription.get('notification_time', '09:00')}</b>\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:"
        
        keyboard = []
        for time_key, time_label in NOTIFICATION_TIMES.items():
            keyboard.append([InlineKeyboardButton(time_label, callback_data=f"set_notification_time_{subscription_id}_{time_key}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_notification_time")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def set_notification_time(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        data = query.data.replace("set_notification_time_", "")
        parts = data.split("_")
        subscription_id = int(parts[0])
        new_time = '_'.join(parts[1:])
        
        subscription = self.db.get_subscription(subscription_id)
        if not subscription:
            await query.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        self.db.update_subscription(subscription_id, notification_time=new_time)
        
        await query.answer(f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤—Ä–µ–º–µ–Ω–∏
        await self.show_notification_time_settings(query, context) 