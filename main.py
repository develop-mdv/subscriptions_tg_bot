import asyncio
import logging
import os
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from config import BOT_TOKEN
from database import Database
from handlers import SubscriptionBot, WAITING_NAME, WAITING_PRICE, WAITING_COMMENT, WAITING_DATE, EDIT_VALUE
from notifications import NotificationManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SubscriptionBotApp:
    def __init__(self):
        self.db = Database()
        self.bot_handler = SubscriptionBot(self.db)
        self.notification_manager = None
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        os.makedirs('exports', exist_ok=True)
        os.makedirs('charts', exist_ok=True)
    
    async def setup_application(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.setup_handlers(application)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_manager = NotificationManager(application.bot, self.db)
        
        return application
    
    def setup_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
        add_command_handler = ConversationHandler(
            entry_points=[
                CommandHandler("add", self.bot_handler.start_add_subscription_command),
                CallbackQueryHandler(self.bot_handler.start_add_subscription, pattern="^add_subscription$")
            ],
            states={
                WAITING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.bot_handler.handle_name)],
                WAITING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.bot_handler.handle_price)],
                WAITING_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.bot_handler.handle_comment)],
                WAITING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.bot_handler.handle_date)],
            },
            fallbacks=[
                CallbackQueryHandler(self.bot_handler.handle_period_selection, pattern="^period_"),
                CallbackQueryHandler(self.bot_handler.show_main_menu, pattern="^back_to_main$"),
                CallbackQueryHandler(self.cancel_conversation_callback, pattern="^cancel_add$"),
                CommandHandler("cancel", self.cancel_conversation)
            ],
            name="add_subscription_command",
            persistent=False
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler –¥–ª—è –∫–æ–º–∞–Ω–¥
        application.add_handler(add_command_handler)
        
        # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        edit_subscription_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.bot_handler.edit_field_entry, pattern="^edit_field_")
            ],
            states={
                EDIT_VALUE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.bot_handler.edit_field_value),
                    CallbackQueryHandler(self.bot_handler.edit_field_set_period, pattern="^set_period_"),
                    CallbackQueryHandler(self.bot_handler.edit_field_set_status, pattern="^set_status_")
                ],
            },
            fallbacks=[
                CallbackQueryHandler(self.bot_handler.show_main_menu, pattern="^back_to_main$"),
                CallbackQueryHandler(self.bot_handler.show_subscriptions, pattern="^list_subscriptions$")
            ],
            name="edit_subscription_handler",
            persistent=False
        )
        application.add_handler(edit_subscription_handler)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", self.bot_handler.start))
        application.add_handler(CommandHandler("help", self.bot_handler.help_command))
        application.add_handler(CommandHandler("list", self.list_subscriptions_command))
        application.add_handler(CommandHandler("analytics", self.analytics_command))
        application.add_handler(CommandHandler("export", self.export_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫ (–≤–∫–ª—é—á–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
        application.add_handler(CallbackQueryHandler(self.bot_handler.button_handler))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        application.add_handler(CallbackQueryHandler(self.bot_handler.show_inactive_subscriptions, pattern="^inactive_subscriptions$"))
        application.add_handler(CallbackQueryHandler(self.bot_handler.change_subscription_status_menu, pattern="^change_status_"))
        application.add_handler(CallbackQueryHandler(self.bot_handler.set_status_inactive, pattern="^set_status_inactive_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        application.add_handler(MessageHandler(filters.COMMAND, self.unknown_command))
    
    async def cancel_conversation(self, update: Update, context):
        """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        user_id = update.message.from_user.id
        if user_id in self.bot_handler.user_states:
            del self.bot_handler.user_states[user_id]
        
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return ConversationHandler.END
    
    async def cancel_conversation_callback(self, update: Update, context):
        """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
        query = update.callback_query
        user_id = query.from_user.id
        if user_id in self.bot_handler.user_states:
            del self.bot_handler.user_states[user_id]
        await query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return ConversationHandler.END
    
    async def list_subscriptions_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /list"""
        user_id = update.message.from_user.id
        subscriptions = self.db.get_user_subscriptions(user_id, 'active')
        
        if not subscriptions:
            await update.message.reply_text(
                "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!",
                parse_mode='HTML'
            )
            return
        
        message = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        
        for i, sub in enumerate(subscriptions, 1):
            from utils import calculate_next_payment_date
            next_payment = calculate_next_payment_date(sub['start_date'], sub['period'])
            days_left = (next_payment - update.message.date.date()).days
            
            message += f"{i}. <b>{sub['name']}</b>\n"
            message += f"   üí∞ {sub['price']} ‚ÇΩ | üìÖ {sub['period']}\n"
            message += f"   ‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: {next_payment.strftime('%d.%m.%Y')} (—á–µ—Ä–µ–∑ {days_left} –¥–Ω.)\n\n"
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def analytics_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /analytics"""
        user_id = update.message.from_user.id
        subscriptions = self.db.get_user_subscriptions(user_id, 'active')
        
        if not subscriptions:
            await update.message.reply_text(
                "üìä <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!",
                parse_mode='HTML'
            )
            return
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_monthly = self.db.get_total_expenses(user_id, 'monthly')
        total_yearly = self.db.get_total_expenses(user_id, 'yearly')
        total_all = self.db.get_total_expenses(user_id, 'total')
        
        message = "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n\n"
        message += f" –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}\n"
        message += f"üí∞ –†–∞—Å—Ö–æ–¥—ã –≤ –º–µ—Å—è—Ü: {total_monthly:.2f} ‚ÇΩ\n"
        message += f"üí∞ –†–∞—Å—Ö–æ–¥—ã –≤ –≥–æ–¥: {total_yearly:.2f} ‚ÇΩ\n"
        message += f"üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_all:.2f} ‚ÇΩ\n\n"
        
        # –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        expenses_by_category = self.db.get_expenses_by_category(user_id)
        if expenses_by_category:
            message += "üìà <b>–†–∞—Å—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏:</b>\n"
            for period, amount in expenses_by_category:
                message += f"‚Ä¢ {period}: {amount:.2f} ‚ÇΩ\n"
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def export_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /export"""
        user_id = update.message.from_user.id
        subscriptions = self.db.get_user_subscriptions(user_id, 'active')
        
        if not subscriptions:
            await update.message.reply_text(
                "üì§ <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ!",
                parse_mode='HTML'
            )
            return
        
        try:
            from utils import export_to_excel
            import datetime
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs('exports', exist_ok=True)
            
            filename = export_to_excel(subscriptions, user_id, self.db)
            
            with open(filename, 'rb') as file:
                await update.message.reply_document(
                    document=file,
                    filename=f"subscriptions_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    caption="üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:\n‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤\n‚Ä¢ –°–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É",
                    parse_mode='HTML'
                )
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:</b>\n\n{str(e)}",
                parse_mode='HTML'
            )
    
    async def debug_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info(f"=== –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ===")
        logger.info(f"–¢–µ–∫—Å—Ç: {update.message.text}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.message.from_user.id}")
        logger.info(f"Chat ID: {update.message.chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
        user_id = update.message.from_user.id
        if hasattr(self.bot_handler, 'user_states') and user_id in self.bot_handler.user_states:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö: {self.bot_handler.user_states[user_id]}")
        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"üîç <b>–û—Ç–ª–∞–¥–∫–∞:</b>\n\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
            f"–í —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö: {'–î–∞' if user_id in getattr(self.bot_handler, 'user_states', {}) else '–ù–µ—Ç'}",
            parse_mode='HTML'
        )
    
    async def start_notification_loop(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.notification_manager:
            await self.notification_manager.run_notification_loop()
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = await self.setup_application()
            
            logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await application.initialize()
            await application.start()
            await application.updater.start_polling()
            
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            notification_task = asyncio.create_task(self.start_notification_loop())
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                await notification_task
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            finally:
                await application.updater.stop()
                await application.stop()
                await application.shutdown()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        await update.message.reply_text(
            "‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
            parse_mode='HTML'
        )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot_app = SubscriptionBotApp()
    await bot_app.run()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
